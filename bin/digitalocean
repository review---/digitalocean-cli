#!/usr/bin/env ruby

require 'gli'
require 'digitalocean-cli'

include GLI::App
include DigitalOcean::API

program_desc 'Command line interface for the DigitalOcean API v2'

version DigitalOcean::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Login to DigitalOcean using a token'
arg_name '<token>'
command :login do |c|
  c.action do |global_options,options,args|
    raise "Missing token" if args.length != 1
    DigitalOcean::Settings.new.save_token(args[0])
  end
end

desc 'Logout from DigitalOcean'
command :logout do |c|
  c.action do |global_options,options,args|
    ensureLoggedIn
    DigitalOcean::Settings.new.delete_token
  end
end

desc 'Inspect and manipulate droplets'
command :droplet do |c|
  c.desc 'Create a new droplet'
  c.arg_name '<name> <cloud-config.yaml>'
  c.command :create do |cc|
    cc.action do |global_options,options,args|
      ensureLoggedIn
      raise "Missing droplet name" if args.length != 2
      DigitalOcean::Droplet.new(:name => args[0], :cloudconfig => IO.read(args[1]))
    end
  end
  c.desc 'Destroy a droplet'
  c.arg_name '<name>'
  c.command :destroy do |cc|
    cc.action do |global_options,options,args|
      ensureLoggedIn
      raise "Missing droplet name" if args.length != 1
      DigitalOcean::Droplet.each do |d|
        d.destroy if d.name == args[0]
      end
    end
  end
  c.desc 'List droplets'
  c.command :list do |cc|
    cc.action do |global_options,options,args|
      ensureLoggedIn
      DigitalOcean::Droplet.each do |d|
        puts "#{d.name}: #{d.status}"
      end
    end
  end
  c.desc 'Power off a droplet'
  c.arg_name '<name>'
  c.command :poweroff do |cc|
    cc.action do |global_options,options,args|
      ensureLoggedIn
      raise "Missing droplet name" if args.length != 1
      DigitalOcean::Droplet.each do |d|
        d.power_off if d.name == args[0]
      end
    end
  end
  c.desc 'Power on a droplet'
  c.arg_name '<name>'
  c.command :poweron do |cc|
    cc.action do |global_options,options,args|
      ensureLoggedIn
      raise "Missing droplet name" if args.length != 1
      DigitalOcean::Droplet.each do |d|
        d.power_on if d.name == args[0]
      end
    end
  end
  c.desc 'Reboot a droplet'
  c.arg_name '<name>'
  c.command :reboot do |cc|
    cc.action do |global_options,options,args|
      ensureLoggedIn
      raise "Missing droplet name" if args.length != 1
      DigitalOcean::Droplet.each do |d|
        d.reboot if d.name == args[0]
      end
    end
  end
end

desc 'Inspect images'
command :image do |c|
  c.desc 'List images'
  c.command :list do |cc|
    cc.action do |global_options,options,args|
      ensureLoggedIn
      DigitalOcean::Image.each do |i|
        puts ""
        puts "Distribution: #{i.distribution} #{i.name}"
        puts "Slug: #{i.slug}"
      end
      puts ""
    end
  end
end

desc 'Inspect regions'
command :region do |c|
  c.desc 'List available regions'
  c.command :list do |cc|
    cc.action do |global_options,options,args|
      ensureLoggedIn
      DigitalOcean::Region.each do |r|
        puts ""
        puts "Name: #{r.name}"
        puts "Slug: #{r.slug}"
      end
      puts ""
    end
  end
end

pre do |global,command,options,args|
  $global_client = DigitalOcean::Client.new(Excon.new(base_url), DigitalOcean::Settings.new.load_token)
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
